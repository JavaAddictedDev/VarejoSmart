# VarejoSmart - Sistema de Gest√£o para Varejo

## üìã Sobre o Projeto
VarejoSmart √© uma solu√ß√£o moderna de gest√£o para o mercado varejista, constru√≠da com uma arquitetura de microservi√ßos utilizando Spring Boot. O sistema oferece uma abordagem modular e escal√°vel para gerenciar diferentes aspectos de opera√ß√µes varejistas.

## üèóÔ∏è Arquitetura do Sistema

### Tecnologias Principais
- **Java 17**
- **Spring Boot 3.x**
- **Spring Cloud Netflix Eureka** (Service Discovery)
- **RabbitMQ** (Message Broker)
- **PostgreSQL** (Banco de Dados Principal)
- **Redis** (Cache)
- **Docker** (Containeriza√ß√£o)
- **Kubernetes** (Orquestra√ß√£o)

### Microservi√ßos

#### 1. Service Registry (eureka-server)
- Registro e descoberta de servi√ßos
- Porta padr√£o: 8761

#### 2. API Gateway
- Roteamento de requisi√ß√µes
- Balanceamento de carga
- Seguran√ßa e autentica√ß√£o centralizada
- Porta padr√£o: 8080

#### 3. Servi√ßo de Autentica√ß√£o (auth-service)
- Gest√£o de usu√°rios e perfis
- Autentica√ß√£o e autoriza√ß√£o
- JWT Token management
- Porta padr√£o: 8081

**Dom√≠nios principais:**
```java
User {
    Long id
    String username
    String password
    String email
    List<Role> roles
    Boolean active
}

Role {
    Long id
    String name
    List<Permission> permissions
}
```

#### 4. Servi√ßo de Produtos (product-service)
- Gest√£o de produtos e categorias
- Gest√£o de estoque
- Precifica√ß√£o
- Porta padr√£o: 8082

**Dom√≠nios principais:**
```java
Product {
    Long id
    String name
    String description
    BigDecimal price
    Category category
    String sku
    Integer stockQuantity
    Boolean active
}

Category {
    Long id
    String name
    String description
    Category parentCategory
}

Stock {
    Long id
    Product product
    Integer quantity
    String location
}
```

#### 5. Servi√ßo de Vendas (sales-service)
- Processamento de pedidos
- Carrinhos de compra
- Gest√£o de transa√ß√µes
- Porta padr√£o: 8083

**Dom√≠nios principais:**
```java
Order {
    Long id
    String orderNumber
    Customer customer
    List<OrderItem> items
    OrderStatus status
    PaymentInfo paymentInfo
    BigDecimal totalAmount
    LocalDateTime createdAt
}

OrderItem {
    Long id
    Product product
    Integer quantity
    BigDecimal unitPrice
    BigDecimal subtotal
}

Cart {
    Long id
    Customer customer
    List<CartItem> items
    LocalDateTime createdAt
    LocalDateTime updatedAt
}
```

#### 6. Servi√ßo de Clientes (customer-service)
- Gest√£o de clientes
- Programas de fidelidade
- Hist√≥rico de compras
- Porta padr√£o: 8084

**Dom√≠nios principais:**
```java
Customer {
    Long id
    String name
    String email
    String cpf
    Address address
    String phone
    LoyaltyProgram loyaltyProgram
}

LoyaltyProgram {
    Long id
    Customer customer
    Integer points
    Level level
    LocalDate joinDate
}
```

#### 7. Servi√ßo de Pagamentos (payment-service)
- Processamento de pagamentos
- Integra√ß√£o com gateways
- Gest√£o de reembolsos
- Porta padr√£o: 8085

**Dom√≠nios principais:**
```java
Payment {
    Long id
    Order order
    BigDecimal amount
    PaymentStatus status
    PaymentMethod method
    String transactionId
    LocalDateTime processedAt
}

Refund {
    Long id
    Payment payment
    BigDecimal amount
    RefundStatus status
    String reason
    LocalDateTime requestedAt
}
```

## üì¶ Regras de Neg√≥cio Principais

### Produtos e Estoque
1. Produtos n√£o podem ter pre√ßo negativo
2. Toda altera√ß√£o de estoque deve ser registrada com log de auditoria
3. Produtos com estoque abaixo do m√≠nimo devem gerar alertas
4. Produtos inativos n√£o podem ser vendidos

### Vendas
1. Verificar disponibilidade de estoque antes de confirmar venda
2. Calcular desconto baseado no programa de fidelidade do cliente
3. Validar formas de pagamento dispon√≠veis
4. Atualizar pontos de fidelidade ap√≥s confirma√ß√£o da venda
5. Enviar notifica√ß√£o para cliente ap√≥s processamento do pedido

### Clientes
1. CPF deve ser v√°lido e √∫nico no sistema
2. Email deve ser √∫nico e validado
3. Programa de fidelidade deve ser atualizado automaticamente baseado em regras de pontua√ß√£o
4. Cliente pode ter apenas um programa de fidelidade ativo

### Pagamentos
1. Timeout m√°ximo de 5 minutos para processamento
2. Reembolsos devem ser aprovados por supervisor
3. Notificar cliente sobre status do pagamento
4. Manter hist√≥rico de todas as transa√ß√µes

## üöÄ Setup do Projeto

### Pr√©-requisitos
- Java 17+
- Maven 3.8+
- Docker
- Docker Compose

### Configura√ß√£o do Ambiente de Desenvolvimento
1. Clone o reposit√≥rio
```bash
git clone https://github.com/JavaAddictedDev/VarejoSmart.git
```

2. Configure as vari√°veis de ambiente em cada servi√ßo (arquivo .env)

3. Inicie os servi√ßos de infraestrutura
```bash
docker-compose up -d
```

4. Execute os microservi√ßos
```bash
./mvnw spring-boot:run
```

## üìà Monitoramento e Observabilidade

- **Prometheus**: Coleta de m√©tricas
- **Grafana**: Visualiza√ß√£o de m√©tricas
- **ELK Stack**: Centraliza√ß√£o de logs
- **Spring Boot Actuator**: Health checks e m√©tricas

## üîí Seguran√ßa

- Autentica√ß√£o via JWT
- Comunica√ß√£o entre servi√ßos via HTTPS
- Secrets management via Vault
- Rate limiting no API Gateway
- Auditoria de opera√ß√µes cr√≠ticas

## üõ†Ô∏è Pr√°ticas de Desenvolvimento

- **Testes**: JUnit 5, Mockito, Testcontainers
- **Documenta√ß√£o**: SpringDoc OpenAPI
- **Versionamento**: Semantic Versioning
- **CI/CD**: GitHub Actions
- **Code Quality**: SonarQube

## üìù Pr√≥ximos Passos

1. Implementa√ß√£o de cache distribu√≠do
2. M√≥dulo de relat√≥rios e analytics
3. App mobile para vendedores
4. Integra√ß√£o com marketplaces
5. Sistema de recomenda√ß√£o de produtos

## üë• Contribui√ß√£o

1. Fork o projeto
2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)
3. Commit suas mudan√ßas (`git commit -m 'Add some AmazingFeature'`)
4. Push para a branch (`git push origin feature/AmazingFeature`)
5. Abra um Pull Request

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a licen√ßa MIT - veja o arquivo [LICENSE.md](LICENSE.md) para detalhes.
